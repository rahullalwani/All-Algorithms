#include<bits/stdc++.h>
using namespace std;

// To heapify a subtree rooted with node i which is
// an index in a[]. n is size of heap
void heapify(int a[],int n,int i)
{
    int largest=i;
    int l=2*i+1;
    int r=2*i+2;

    if(l<n && a[l]>a[largest])
        largest=l;
    if(r<n && a[r]>a[largest])
        largest=r;

    if(largest!=i)
    {
        swap(a[i],a[largest]);
        heapify(a,n,largest);
    }//if


}
void heapsort(int a[],int n)
{
    for(int i=n/2-1;i>=0;i--)
        heapify(a,n,i);
    for(int i=n-1;i>=0;i--)
    {
        swap(a[0],a[i]);
        heapify(a,i,0);
    }

}//heap sort
int main()
{
    int a[]={15,10,47,54,65,29,45};
    int n=sizeof(a)/sizeof(a[0]);
    cout<<"Array before:"<<endl;
    for(int i=0;i<n;i++)
        cout<<a[i]<<" ";
    cout<<endl;
    heapsort(a,n);
    cout<<"Array after:"<<endl;
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
    return 0;
}
